// Resizes a BMP file in (int) n times

#include <stdio.h>
#include <stdlib.h>

#include "bmp.h"

int main(int argc, char *argv[])
{
    // ensure proper usage
    if (argc != 4)
    {
        fprintf(stderr, "Usage: copy infile outfile\n");
        return 1;
    }

    // remember filenames
    char *infile = argv[2];
    char *outfile = argv[3];

    // open input file
    FILE *inptr = fopen(infile, "r");
    if (inptr == NULL)
    {
        fprintf(stderr, "Could not open %s.\n", infile);
        return 2;
    }

    // open output file
    FILE *outptr = fopen(outfile, "w");
    if (outptr == NULL)
    {
        fclose(inptr);
        fprintf(stderr, "Could not create %s.\n", outfile);
        return 3;
    }

    int n = atoi(argv[1]);

    // read infile's BITMAPFILEHEADER
    BITMAPFILEHEADER bf;
    fread(&bf, sizeof(BITMAPFILEHEADER), 1, inptr);

    // read infile's BITMAPINFOHEADER
    BITMAPINFOHEADER bi;
    fread(&bi, sizeof(BITMAPINFOHEADER), 1, inptr);

    // ensure infile is (likely) a 24-bit uncompressed BMP 4.0
    if (bf.bfType != 0x4d42 || bf.bfOffBits != 54 || bi.biSize != 40 ||
        bi.biBitCount != 24 || bi.biCompression != 0)
    {
        fclose(outptr);
        fclose(inptr);
        fprintf(stderr, "Unsupported file format.\n");
        return 4;
    }

printf("\n");
printf("INNER:\n");
printf("biWidth     =  %i pixels\n", bi.biWidth);
printf("biHeight    = %i pixels\n", bi.biHeight);

    // determine padding for scanlines (ВХОДНЫЕ нули):
    int in_padding = ((4 - (bi.biWidth * sizeof(RGBTRIPLE)) % 4) % 4);

printf("in_padding  =  %i\n", in_padding);
printf("biSizeImage = %i bytes\n", bi.biSizeImage);
printf("bfSize      = %i bytes\n", bf.bfSize);

    // Для ВЫХОДНОГО файла:
printf("\n");
printf("OUTER:\n");
    bi.biWidth     = n * bi.biWidth ;
printf("biWidth     =  %i pixels\n", bi.biWidth);
    bi.biHeight    = -n * abs(bi.biHeight);
printf("biHeight    = %i pixels\n", bi.biHeight);

    // determine padding for scanlines (нули для ВЫХОДНОГО файла):
    int out_padding = ((4 - (bi.biWidth * sizeof(RGBTRIPLE)) % 4) % 4);
printf("out_padding =   %i\n", out_padding);

    // Для ВЫХОДНОГО файла:
    bi.biSizeImage = (bi.biWidth * sizeof(RGBTRIPLE) + out_padding) * abs(bi.biHeight);
printf("biSizeImage = %i bytes\n", bi.biSizeImage);
    bf.bfSize      = bi.biSizeImage + sizeof(BITMAPINFOHEADER) + sizeof(BITMAPFILEHEADER);
printf("bfSize      = %i bytes\n", bf.bfSize);
printf("\n");



    // write outfile's BITMAPINFOHEADER
    fwrite(&bi, sizeof(BITMAPINFOHEADER), 1, outptr);

    // write outfile's BITMAPFILEHEADER
    fwrite(&bf, sizeof(BITMAPFILEHEADER), 1, outptr);

    // ensure infile is (likely) a 24-bit uncompressed BMP 4.0
    if (bf.bfType != 0x4d42 || bf.bfOffBits != 54 || bi.biSize != 40 ||
        bi.biBitCount != 24 || bi.biCompression != 0)
    {
        fclose(outptr);
        fclose(inptr);
        fprintf(stderr, "Unsupported file format.\n");
        return 5;
    }

    // iterate over infile's scanlines
     for (int i = 0, biHeight = abs(bi.biHeight) / n; i < biHeight; i++)
    {
//        for (int hi = 0; hi < n-1; hi++)
//        {
            // iterate over pixels in scanline
            for (int j = 0, biWidth = bi.biWidth / n; j < biWidth; j++)
            {
               // temporary storage
               RGBTRIPLE triple;

                // read RGB triple from infile
                fread(&triple, sizeof(RGBTRIPLE), 1, inptr);

                for (int i1 = 0; i1 < n; i1++)
                {
                    // write RGB triple to outfile
                    fwrite(&triple, sizeof(RGBTRIPLE), 1, outptr);
                }
            }

            // skip over padding, if any (для ВХОДНОГО файла): // padding это нули! - кол-во байтов в строке должно быть кратно 4
            fseek(inptr, in_padding, SEEK_CUR);

            // добавление нулей в ВЫХОДНОЙ файл:
            for (int k = 0; k < out_padding; k++)
            {
               fputc(0x00, outptr);
            }

             // возврат курсора к началу строки (для ВХОДНОГО файла):
//            fseek(inptr, -(in_padding + bi.biWidth * sizeof(RGBTRIPLE)), SEEK_CUR);
//        }

        // temporary storage
/*
        RGBTRIPLE triple;

        // read RGB triple from infile
        fread(&triple, sizeof(RGBTRIPLE), 1, inptr);

        for (int i2 = 0; i2 < n; i2++)
        {
            // write RGB triple to outfile
            fwrite(&triple, sizeof(RGBTRIPLE), 1, outptr);
        }

        // skip over padding, if any (для ВХОДНОГО файла): // padding это нули! - кол-во байтов в строке должно быть кратно 4
        fseek(inptr, in_padding, SEEK_CUR);

        // добавление нулей в ВЫХОДНОЙ файл:
        for (int k = 0; k < out_padding; k++)
        {
           fputc(0x00, outptr);
        }
*/
    }

    // close infile
    fclose(inptr);

    // close outfile
    fclose(outptr);



    printf("bfType      = %i\n", bf.bfType);

    FILE *outf = fopen(outfile, "w");
    if (outf == NULL)
    {
        fprintf(stderr, "Could not create %s.\n", outfile);
        return 6;
    }

    BITMAPFILEHEADER bf1;
    fread(&bf1, sizeof(BITMAPFILEHEADER), 1, outf);

    printf("bf1Type      = %i\n", bf1.bfType);

    // close outfile
    fclose(outf);



    // success
    return 0;
}
